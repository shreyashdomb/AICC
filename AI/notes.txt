Notes
Enter number of nodes in the graph: 6
Enter number of edges in the graph: 7
Enter the endpoints of edge 1: 0 1
Enter the endpoints of edge 2: 0 2
Enter the endpoints of edge 3: 1 3
Enter the endpoints of edge 4: 1 4
Enter the endpoints of edge 5: 2 4
Enter the endpoints of edge 6: 3 5
Enter the endpoints of edge 7: 4 5
Enter 0 to perform DFS and 1 to perform BFS: 0
Enter the node to search: 5

A star
start state-
1 3 4
-1 2 5
6 7 8
Goal state-
1 3 4
2 5 -1
6 7 8s


Prims ALgorithm
Edge 0 - 0 : 0
Edge 0 - 1 : 2
Edge 0 - 2 : 0
Edge 0 - 3 : 6
Edge 0 - 4 : 0
Edge 1 - 0 : 2
Edge 1 - 1 : 0
Edge 1 - 2 : 3
Edge 1 - 3 : 8
Edge 1 - 4 : 5
Edge 2 - 0 : 0
Edge 2 - 1 : 3
Edge 2 - 2 : 0
Edge 2 - 3 : 0
Edge 2 - 4 : 7
Edge 3 - 0 : 6
Edge 3 - 1 : 8
Edge 3 - 2 : 0
Edge 3 - 3 : 0
Edge 3 - 4 : 9
Edge 4 - 0 : 0
Edge 4 - 1 : 5
Edge 4 - 2 : 7
Edge 4 - 3 : 9
Edge 4 - 4 : 0

Output:
Edge   Weight
0 - 1   2
1 - 2   3
0 - 3   6
1 - 4   5

Graph color:
Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges (vertex1 vertex2):
0 1
0 2
1 2
1 3
2 3
3 4

Dijkstra
Input:
Number of vertices: 6
Number of edges: 9

Edges and their weights:
Edge 1: 0 1 4
Edge 2: 0 2 2
Edge 3: 1 2 1
Edge 4: 1 3 5
Edge 5: 2 3 8
Edge 6: 2 4 10
Edge 7: 3 4 2
Edge 8: 3 5 6
Edge 9: 4 5 3

celsius to farhenit
public class Temperature {
public static void Ctof(Decimal celsiusTemperature) {
        Decimal fahrenheitTemperature = (celsiusTemperature * 9/5) + 32;
        System.debug(fahrenheitTemperature.setScale(2));
    }
}

calculator
public class Calculator {
public static Double add(Double a, Double b) {
        System.debug(a+b);
        return a + b;
    }

    public static Double subtract(Double a, Double b) {
        System.debug(a-b);
        return a - b;
    }

    public static Double multiply(Double a, Double b) {
        System.debug(a*b);
        return a * b;
    }

    public static Double divide(Double a, Double b) {
        System.debug(a/b);
        return a / b;
    }
}

Palindrome
public class Palind {
   public void palindrome(String inputString){
        
        String reverseString ='';
        reverseString = inputString.reverse();
        
        if(inputString.equals(reverseString)){
            system.debug('String is Palindrome');
        }
        else{
            system.debug('String is not Palindrome');
        }   
    }   
}


Reverse
public class Reve {
public void rever(String inputString){
        
        String reverseString ='';
        reverseString = inputString.reverse();
        system.debug(reverseString);
}
}

execution for above code
Reve reversed = new Reve();
String input = 'vikram'; 

reversed.rever(input);